News
****

The currently released version of the library is `0.5.0'.

Noteworthy changes in version `0.5.1'
=====================================

   * Additional runtime functions for interaction with Guile and
     ObjC-Guile library.

Noteworthy changes in version `0.5.0'
=====================================

   * Improvements to the NSInvocation class, from  Masatake Yamato
     <masata-y@aist-nara.ac.jp>.

   * Implemented several new OpenStep methods and classes (e.g. NSTask)
     and speed improvements for others (NSArray, NSData, NSString),
     from  Richard Frith-Macdonald  <richard@brainstorm.co.uk>.

   * gdomap now handles subnet addressing and machines with multiple IP
     addresses from  Richard Frith-Macdonald
     <richard@brainstorm.co.uk>.

Noteworthy changes in version `0.4.0'
=====================================

   * New tools for maintaining the defaults database.

   * Use the new GNUstep Makefile Package to compile the library, tools
     checks, and everything else.

   * An implementation of NSDistributedLock

   * NSData implemented as a class cluster including a class to
     allocate shared VM memory.

   * Big NSTimeZone improvements, as well as inclusion of time zone
     files, from Yoo C. Chung  <wacko@laplace.snu.ac.kr>.

   * Major improvements to distributed objects and many related clases
     from Richard Frith-Macdonald <richard@brainstorm.co.uk>. Also
     added a nameserver.

   * Major rewrite of NSString, include Unicode strings from Stevo
     Crvenkovski  <stevo@btinternet.com>

   * A rewrite of the NSBundle class from Adam Fedor <fedor@gnu.org>

   * Addition of a C-language style stream package.

   * Better support for threads and locking.

   * Support for running on Windows from Scott Christley
     <scottc@net-community.com>

   * Many, many, many, many bug fixes and new classes.

Noteworthy changes since version `0.1.19'
=========================================

   * The library has changed its name from `libobjects' to
     `libgnustep-base'.  The Apr 17 ChangeLog entry contains a list of
     the way various other names were changed.

   * The library now requires a patch to gcc-2.7.2.  The patch adds
     thread-safe features to the GNU Objective C runtime.  Each thread
     has its own exception handler and assertion handler, thanks to Yoo
     C. Chung <wacko@power1.snu.ac.kr>.

   * Distributed Objects is much improved.  Exceptions in the server
     are sent back to the client.  Ungracefully closed connections are
     gracefully handled.

   * NSUserDefaults has been implemented, thanks to Georg Tuparev
     <tuparev@NMR.EMBL-Heidelberg.DE>.

   * NSScanner has been implemented, thanks to Eric Norum
     <Eric.Norum@usask.ca>.

   * NSCharacterSet has a new caching scheme, and is now faster than
     NeXT's implementation, thanks to Adam Fedor.

   * Preliminary thread-safety work has been done.  NSObject and
     NSAutoreleasePool should be thread-safe.

   * The "%@" printf directive now works on systems without GNU libc.

   * The NS*Page* functions have been implemented.

   * The mframe and behavior functions have been overhauled and better
     commented.

   * The NSHashTable and NSMapTable functions have been implemented,
     thanks to Albin Jones <albin.jones@dartmouth.edu>.  Albin has also
     implemented underlying GNU functions that provide functions for
     arrays and linked lists of C-type variables.

   * The NSThread class has been implemented.  Thanks to Scott
     Christley <scottc@net-community.com>, the NSLock class has been
     implemented.

   * A RunLoop class has been implemented, and is used for listening to
     Port objects.  It is used for Distributed Objects.  There is also
     an NSRunLoop class based on RunLoop.

   * The NSTimer class has been implemented, although its use with
     RunLoops is currently disabled.

   * The Notification mechanism has been implemented.  It makes good
     use of hash tables and linked lists in order to be fast.

   * The Invocation class heirarchy has been fleshed out and now works.

   * The collection classes have been overhauled to better handle
     distributed objects, and for better compatibility with NeXT's
     method names.

     A new separation has been made in the abstract collection classes:
     IndexedCollections contain objects accessible by an integer key,
     but the user cannot insert at an arbitrary key; these are useful
     for sorted collections, such as SplayTree's. OrderedCollection can
     have their order determined by the user; i.e. users can send
     `-insertObject:atIndex:', etc.

     There is a new set of rich enumeration methods based on
     Invocations.

   * Port class heirarchy has been overhauled.  There are now classes
     for TCP ports, UDP ports, and Mach ports.  Only the TCP ports are
     currently functional.

   * GNU-style archiving has had an overhaul, and the GNUstep
     NSArchiver class is functional, but not strongly tested.  It does
     not yet call -awakeUsingCoder:.

     I have separated the high-level archiving of groups of objects
     from the low-level format of how C-types are written.  There are
     several new classes.  CStream is a subclass of Stream that knows
     how to encode C-type variables in a machine independent way; this
     class has two concrete subclasses: BinaryCStream, and TextCStream.
     Plug these backends into Coder to get different style low-level
     formats for archiving.

     Floats and doubles are now encoded more efficiently.

     NSArchiver is built on top of Coder.  You can actually send all the
     Coder methods to NSArchiver and vice-versa.

     GNU classes BinaryCoder and TextCoder are gone.

   * Several new OpenStep functions have been implemented:
     NSHomeDirectory, NSUserName, NSHomeDirectoryForUser, NSPageSize,
     NSLogPageSize, NSroundUpToMultipleOfPageSize,
     NSRoundDownToMultipleOfPageSize, NSRealMemoryAvailable,
     NSAllocateMemoryPages, NSDeallocateMemoryPages, NSCopyMemoryPages.

   * ...and many bug fixes.

Noteworthy changes since version `0.1.14'
=========================================

   * Can be made as a shared library by passing `--enabled-shared' to
     `configure'.  Thanks to Jan Kybic <kybic@earn.cvut.cz> and Bryan
     Headley <bwh@mail.lnd.coretech.com> for suggestions.

   * New classes NSSet, NSMutableSet, NSCountedSet.  New concrete
     classes NSGSet, NSGMutableSet, NSGCountedSet.  New test program
     nsset.m.  New class NSMethodSignature.

   * Running './configure' and building the library in a different
     directory than the source works as it should, according to the GNU
     standards.

   * Dynamic loading fixes for Solaris, thanks to Adam Fedor.

   * Fixes to Coder correct bugs with encoding/decoding wildly
     interconnected objects.  (My application uses a "Suffix Tree"
     structure: a Tree, and a LinkedList that winds its way through the
     leaves of the tree; the LinkedList nodes also have pointers back
     to the tree nodes.)

   * NSTimeZone implemented, thanks to Peter Burka
     <peter@bert.psyc.upei.ca>

   * NSData fixes, thanks to Adam Fedor.

   * NSObjCRuntime functions implemented.  NSObject description methods
     implemented.

   * Bug fixes in NSString, NSDictionary, NSArray, NSGeometry and other
     places.

Noteworthy changes since version `0.1.13'
=========================================

   * NSProcessInfo class, thanks to Georg Tuparev.

   * NSDate now more operational, thanks to Jeremy Bettis.

   * Autorelease checking improved, thanks to Adam Fedor.

   * NSString concrete classes now more configurable.  Several new
     methods implemented.

   * Many bug fixes.

Noteworthy changes since version `0.1.12'
=========================================

   * Bug fixes: installation; NSArray and NSDictionary copying;
     NSArray, NSDictionary, NSData, NSArchiver, NSUnarchiver concrete
     class configurability; NSString -getCharacter:range:. See the
     ChangeLog for more details.

Noteworthy changes since version `0.1.10'
=========================================

   * Now using `src', `config' and `doc' directories to un-clutter the
     top-level directory.

   * New GNUStep classes implemented: NSDictionary, NSMutableDictionary;
     concrete classes NSGDictionary, NSGMutableDictionary; enumeration
     classes NSGDictionaryKeyEnumerator, NSGDictionaryObjectEnumerator.

   * More methods in NSData are implemented, thanks to Albin Jones.

   * More methods in NSString are implemented; we have new classes
     NSCharacterSet and NSBitmapCharSet; all thanks to Adam Fedor.

   * And several bug fixes.  See the ChangeLog for details.

Noteworthy changes since version `0.1.9'
========================================

   * Renamed "foundation" include file directory to "Foundation", in
     accordance with OpenStep.

   * Several bug fixes, including a problem with a missing file in
     0.1.9.

Noteworthy changes since version `0.1.8'
========================================

   * Many new GNUStep classes: NSEnumerator, NSArrayEnumerator, NSCoder,
     NSArchiver, NSUnarchiver, NSData, NSMutableData, NSGCoder,
     NSGArchiver, NSGUnarchiver, NSGData, NSGMutableData.  Much coding
     and prep work has been done to make archiving work (see the
     ChangeLog), but it's not quite ready for action yet.

   * New GNUStep classes implemented by others: Thanks to Adam Fedor,
     NSAssertionHandler.  Thanks to Jeremy Bettis, NSDate.

   * Overhauled encoding and decoding.  The Coder now sends
     -initWithCoder by default, but will still send the more flexible
     +newWithCoder if the class implements it.  See objects/Coding.h.
     The Stream class interface has been changed slightly.  There are
     two new protocols for Streams.

   * Several new debug-aiding methods implemented in NSAutoreleasePool.

   * Separated Constant Collection protocols from changeable ones.
     Eventually I'll separate the classes too.

   * Included an outline for the GNU Objective C Language Manual.  The
     GNU project is looking for volunteers to help flesh it out.  Send
     email to Martin Michlmayr <tbm@ihq.com> or Andrew McCallum
     <mccallum@gnu.ai.mit.edu>.

   * Include the AUTHORS file, needed for legal reasons.  Include the
     `GNUStep-volunteers' file.

   * Several bug fixes:  Typo in Array.m; Linux header file frobbing in
     NSZone.h; typo causing crash in checks/nsarray.m; bad deallocation
     in Collection.m; typo in BinaryTree.m; put -write: and -read:
     implementations back in Collection.m.

Noteworthy changes since version `0.1.7'
========================================

   * Thanks to Adam Fedor <fedor@boulder.colorado.edu>, classes
     NSBundle, NSNumber and NSValue are now operational.  He also
     provided stubs for NSArray, NSCoder and NSDictionary.

   * NSArray has been fleshed out.  There are new classes
     NSConcreteArray and NSConcreteMutableArray.  Basic operations with
     the NSArray class cluster now work, and it is set up to coexist
     nicely with the GNU collection heirarchy.  Next I'll do
     NSDictionary in a similar style.

   * From Adam Fedor, there is a new patch to the gcc Objective C
     runtime that aids dynamic linking.  You'll have to apply this
     patch and reinstall the runtime before you can compile this
     version of libgnustep-base.

   * Several bug fixes, including two serious ones in Collection
     deallocation and behavior adding.  See the ChangeLog for details.

Noteworthy changes since version `0.1.5'
========================================

   * Better string handling.  NSString is now fleshed out, and I've
     implemented a scheme by which the GNU String object and OpenStep's
     NSString can coexist nicely.  The OpenStep classes declare their
     string arguments with (NSString*) just like the standard says, but
     the preferred (more flexible) way to declare string arguments is
     (id <String>); and these two types are set up so that they
     coexist.  There is still more to be done.  NSString has several
     unimplemented methods; GNU String needs some more work.

   * Newly implemented classes: MallocAddress, NSString,
     NSMutableString, NSCString, NSMutableCString.

   * Thanks to Pieter Schoenmakers <tiggr@es.ele.tue.nl> we have a new
     version of the gcc-string.patch that should apply more smoothly.

   * Thanks to Adam Fedor <fedor@boulder.colorado.edu> for a bug fix to
     NXStringTable's.

   * Thanks to Mark Lakata <lakata@nsdssp.lbl.gov> for a bug fix to
     NSZone.c.

   * Several bug fixes.  Thanks to those who reported them.  Credits
     are in the ChangeLog.

Noteworthy changes since version `0.1.3'
========================================

   This release not well tested at all.  We desperately need someone to
write a test suite using dejagnu.  Any volunteers?

   I made this release now in order to share the progress that is being
made on GNUSTEP.

   * New GNUSTEP implementations: NSObject, NSAutoreleasePool, NSZone.
     Thanks to Mark Lakata for NSZone.

   * New GNUSTEP implementations included, but not compiled: NSBundle,
     NSException, NSGeometry, NSNumber, NSValue.  Many thanks Adam
     Fedor.

   * Many new GNU classes: String classes!  String, MutableString,
     ConstantString.  One interesting feature of the GNU string classes
     is that that, just like in Smalltalk, they are part of the
     Collection heirarchy--all the methods you are used to using on
     other collections can be used on these "collections of
     characters".  You can create ConstantStrings using the @"" syntax.

   * Entire library converted to use `retain', `release',
     `autorelease', `dealloc' instead of `free'.

Noteworthy changes since version `0.1.0'
========================================

   * New category: ObjectRetaining.  New classes: AutoreleasePool,
     AutoreleaseStack.

   * Bug fixes: Install next-includes properly.  New instructions in
     README.ULTRIX.  Time.m patched for Solaris 2.4.  test12.m free fix.

Noteworthy changes in version `0.1.0'
=====================================

   * Renamed the library from `libcoll' to `libgnustep-base'.  (See the
     end of the file `DISCUSSION' for the background on this name
     choice.)  Several file names changed to reflect this.  GNU class
     interfaces are now included with `objects' prefix, e.g. `#include
     <objects/BinaryTree.h>'.

   * Many new classes. Pseudo-random number classes Random, RNGBerkeley
     and RNGAdditiveCongruential.  New stream classes Stream,
     StdioStream and MemoryStream.  New coder classes Coder, TextCoder
     and BinaryCoder.  New network packet transmission classes Port and
     SocketPort.  New remote object messaging classes Connection, Proxy
     and ConnectedCoder.  New protocols Coding and Retaining.  New, but
     unimplemented: Lock and Locking.  New but soon-to-disapppear:
     RetainingNotifier, InvalidationListening.

   * Some bug fixes:  Fixed the assert typo in Storage.m.  The Time
     class now compiles under Solaris.  Fixed insertion bug in
     CircularArray.  NXStringTable_scan.l can now be compiled with lex,
     not just flex, (thanks to Adam Fedor <adam@bastille.rmnug.org>).
     Properly detect the difference between gcc running under NEXTSTEP
     and NeXT's cc.  Using autoconf version 2.0.  Renamed DelegateList
     to DelegatePool.  Renamed some collection hierarchy methods for
     better consistency.

   * Some directory reorganization so that NeXT-compatible files can be
     included in the standard way, e.g. #include <objc/List.h>.  Some
     other NeXT-compatibility improvements: Changed `GNU' prefix to `NX'
     in List and HashTable.  New files zone.[hc] containing dummy stubs
     for NeXT-compatible zone functions.

Noteworthy changes in verion `940524'
=====================================

   * A NeXT-compatible NXStringTable object, thanks to Adam Fedor
     <adam@bastille.rmnug.org>.

   * SplayTree and RBTree classes now operational.  More methods in Time
     class implemented.

   * Some API cleanup:  -delegateListList changed to
     -delegateListCollection.  -includesSameContents: changed to
     -contentsEqual:.  -insertObject:atKey: changed to
     -putObject:atKey:.  See the ChangeLog for more detail.

   * Configuration by autoconf in the self-tests directory.
     Configuration script tests GCC nested functions.  Configuration
     script detects NEXTSTEP and makes the appropriate adjustments,
     including skipping the NeXT-compatibility classes.

   * Bug fixes: BinaryTree rotate methods fixed.  Fixed the way
     `ifNone:' and `ifAbsent:' functions were called.  Fixed the way
     long elements are printed.  Added methods for preventing memory
     leaks by unfinished enumerations: `-newEnumState' and
     `-freeEnumState:'.  Several bug fixes in List and Storage; changes
     for better NeXT-compability.  And more.

Noteworthy changes in version `931026'
======================================

   * Installation using `./configure' and `autoconf'

   * New BinaryTree and RBTree(unfinished) classes.  Rewritten
     LinkedList class.

   * A new scheme for holding non-object elements in classes that
     require   object contents; EltNodeCollector class.

   * Archiving with -write: and -read: methods.  This involved removing
     the ability to set the comparison function independent of content
     type.

   * Removed COLL_NO_ELEMENT and friends.  Now there are no arbitrary
     restrictions on which long int's can be stored.  Like in Smalltalk,
     ...ifAbsentCall: methods have been added to replace this
     functionalty.

   * Added a LABMDA() macro for defining small functions in the arg
     position.

   * Removed many ...perform: methods.  Use instead the more flexible
     ...call: methods with LABMDA().

   * Renamed ...Description: methods to ...Encoding: for better use of
     already-defined objc keyword: @encode().

   * New in the Collecting protocol: Filtered enumerating instead of
     filtered shallowCopy'ing.  Enumerations still safe when modifying
     the contents.

   * The beginnings of documentation in libcoll.texi.

   * Many bug fixes.

   * ...and more.

   Also see the `ChangeLog' file for more detail.

