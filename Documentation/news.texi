@include version.texi
@ifset NEWS_ONLY
@chapter News about GNU Objective C Class Library

The currently released version of the library is
@samp{@value{OBJECTS_VERSION}}.
@end ifset

@section Noteworthy changes since version @samp{0.1.9}

@itemize

@item
Renamed "foundation" include file directory to "Foundation", in
accordance with OpenStep.

@item
Several bug fixes, including a problem with a missing file in 0.1.9.

@end itemize

@section Noteworthy changes since version @samp{0.1.8}

@itemize

@item
Many new GNUStep classes: NSEnumerator, NSArrayEnumerator, NSCoder,
NSArchiver, NSUnarchiver, NSData, NSMutableData, NSGCoder, NSGArchiver,
NSGUnarchiver, NSGData, NSGMutableData.  Much coding and prep work has
been done to make archiving work (see the ChangeLog), but it's not quite
ready for action yet.

@item
New GNUStep classes implemented by others: Thanks to Adam Fedor,
NSAssertionHandler.  Thanks to Jeremy Bettis, NSDate.

@item
Overhauled encoding and decoding.  The Coder now sends -initWithCoder by
default, but will still send the more flexible +newWithCoder if the
class implements it.  See objects/Coding.h.  The Stream class interface
has been changed slightly.  There are two new protocols for Streams.

@item
Several new debug-aiding methods implemented in NSAutoreleasePool.

@item
Separated Constant Collection protocols from changeable ones.
Eventually I'll separate the classes too.

@item
Included an outline for the GNU Objective C Language Manual.  The GNU
project is looking for volunteers to help flesh it out.  Send email to
Martin Michlmayr <tbm@@ihq.com> or Andrew McCallum
<mccallum@@gnu.ai.mit.edu>.

@item
Include the AUTHORS file, needed for legal reasons.  Include the
@file{GNUStep-volunteers} file.

@item
Several bug fixes:  Typo in Array.m; Linux header file frobbing in
NSZone.h; typo causing crash in checks/nsarray.m; bad deallocation in
Collection.m; typo in BinaryTree.m; put -write: and -read:
implementations back in Collection.m.

@end itemize

@c ====================================================================
@c Keep the next line just below the list of changes in most recent version.
@ifclear ANNOUNCE_ONLY

@section Noteworthy changes since version @samp{0.1.7}

@itemize

@item
Thanks to Adam Fedor <fedor@@boulder.colorado.edu>, classes NSBundle,
NSNumber and NSValue are now operational.  He also provided stubs for
NSArray, NSCoder and NSDictionary.  

@item
NSArray has been fleshed out.  There are new classes NSConcreteArray and
NSConcreteMutableArray.  Basic operations with the NSArray class cluster
now work, and it is set up to coexist nicely with the GNU collection
heirarchy.  Next I'll do NSDictionary in a similar style.

@item
From Adam Fedor, there is a new patch to the gcc Objective C runtime
that aids dynamic linking.  You'll have to apply this patch and
reinstall the runtime before you can compile this version of libobjects.

@item
Several bug fixes, including two serious ones in Collection deallocation
and behavior adding.  See the ChangeLog for details.

@end itemize

@section Noteworthy changes since version @samp{0.1.5}

@itemize

@item
Better string handling.  NSString is now fleshed out, and I've
implemented a scheme by which the GNU String object and OpenStep's
NSString can coexist nicely.  The OpenStep classes declare their string
arguments with (NSString*) just like the standard says, but the
preferred (more flexible) way to declare string arguments is (id
<String>); and these two types are set up so that they coexist.  There
is still more to be done.  NSString has several unimplemented methods;
GNU String needs some more work.

@item
Newly implemented classes: MallocAddress, NSString, NSMutableString,
NSCString, NSMutableCString.

@item
Thanks to Pieter Schoenmakers <tiggr@@es.ele.tue.nl> we have a new
version of the gcc-string.patch that should apply more smoothly.

@item
Thanks to Adam Fedor <fedor@@boulder.colorado.edu> for a bug fix to
NXStringTable's.

@item
Thanks to Mark Lakata <lakata@@nsdssp.lbl.gov> for a bug fix to NSZone.c.

@ignore
@item
Thanks to Jeremy Bettis <jbettis@cse.unl.edu> for implementing NSDate. 
(We're waiting for the assignment paperwork to go through before it's
included in the release.)
@end ignore

@item
Several bug fixes.  Thanks to those who reported them.  Credits are in
the ChangeLog.

@end itemize

@section Noteworthy changes since version @samp{0.1.3}

This release not well tested at all.  We desperately need someone to
write a test suite using dejagnu.  Any volunteers?

I made this release now in order to share the progress that is being
made on GNUSTEP.

@itemize

@item
New GNUSTEP implementations: NSObject, NSAutoreleasePool, NSZone.
Thanks to Mark Lakata for NSZone.

@item
New GNUSTEP implementations included, but not compiled: NSBundle,
NSException, NSGeometry, NSNumber, NSValue.  Many thanks Adam Fedor.

@item
Many new GNU classes: String classes!  String, MutableString,
ConstantString.  One interesting feature of the GNU string classes is
that that, just like in Smalltalk, they are part of the Collection
heirarchy---all the methods you are used to using on other collections
can be used on these "collections of characters".  You can create
ConstantStrings using the @@"" syntax.

@item Entire library converted to use @code{retain}, @code{release},
@code{autorelease}, @code{dealloc} instead of @code{free}.

@end itemize

@section Noteworthy changes since version @samp{0.1.0}

@itemize

@item New category: ObjectRetaining.  New classes: AutoreleasePool,
AutoreleaseStack.

@item Bug fixes: Install next-includes properly.  New instructions in
README.ULTRIX.  Time.m patched for Solaris 2.4.  test12.m free fix.

@end itemize

@section Noteworthy changes in version @samp{0.1.0}

@itemize

@item Renamed the library from @samp{libcoll} to @samp{libobjects}.
(See the end of the file @samp{DISCUSSION} for the background on this
name choice.)  Several file names changed to reflect this.  GNU class
interfaces are now included with @samp{objects} prefix,
e.g. @samp{#include <objects/BinaryTree.h>}.

@item Many new classes. Pseudo-random number classes Random, RNGBerkeley
and RNGAdditiveCongruential.  New stream classes Stream, StdioStream and
MemoryStream.  New coder classes Coder, TextCoder and BinaryCoder.  New
network packet transmission classes Port and SocketPort.  New remote
object messaging classes Connection, Proxy and ConnectedCoder.  New
protocols Coding and Retaining.  New, but unimplemented: Lock and
Locking.  New but soon-to-disapppear: RetainingNotifier,
InvalidationListening.

@item Some bug fixes:  Fixed the assert typo in Storage.m.  The Time
class now compiles under Solaris.  Fixed insertion bug in CircularArray.
NXStringTable_scan.l can now be compiled with lex, not just flex,
(thanks to Adam Fedor <adam@@bastille.rmnug.org>).  Properly detect the
difference between gcc running under NEXTSTEP and NeXT's cc.  Using 
autoconf version 2.0.  Renamed DelegateList to DelegatePool.  Renamed
some collection hierarchy methods for better consistency.

@item Some directory reorganization so that NeXT-compatible files can be
included in the standard way, e.g. #include <objc/List.h>.  Some other
NeXT-compatibility improvements: Changed @samp{GNU} prefix to @samp{NX}
in List and HashTable.  New files zone.[hc] containing dummy stubs for
NeXT-compatible zone functions.

@end itemize

@section Noteworthy changes in verion @samp{940524}

@itemize

@item A NeXT-compatible NXStringTable object, thanks to Adam Fedor
<adam@@bastille.rmnug.org>.

@item
SplayTree and RBTree classes now operational.  More methods in Time
class implemented.

@item
Some API cleanup:  -delegateListList changed to -delegateListCollection.
-includesSameContents: changed to -contentsEqual:.  -insertObject:atKey:
changed to -putObject:atKey:.  See the ChangeLog for more detail.

@item
Configuration by autoconf in the self-tests directory.  Configuration
script tests GCC nested functions.  Configuration script detects
NEXTSTEP and makes the appropriate adjustments, including skipping the
NeXT-compatibility classes.

@item
Bug fixes: BinaryTree rotate methods fixed.  Fixed the way
@code{ifNone:} and @code{ifAbsent:} functions were called.  Fixed the
way long elements are printed.  Added methods for preventing memory
leaks by unfinished enumerations: @code{-newEnumState} and
@code{-freeEnumState:}.  Several bug fixes in List and Storage; changes
for better NeXT-compability.  And more.

@end itemize

@section Noteworthy changes in version @samp{931026}

@itemize

@item
Installation using @samp{./configure} and @samp{autoconf}

@item
New BinaryTree and RBTree(unfinished) classes.  Rewritten LinkedList
class.

@item
A new scheme for holding non-object elements in classes that require
  object contents; EltNodeCollector class.

@item
Archiving with -write: and -read: methods.  This involved removing the
ability to set the comparison function independent of content type.

@item
Removed COLL_NO_ELEMENT and friends.  Now there are no arbitrary
restrictions on which long int's can be stored.  Like in Smalltalk,
...ifAbsentCall: methods have been added to replace this functionalty.

@item
Added a LABMDA() macro for defining small functions in the arg position.

@item
Removed many ...perform: methods.  Use instead the more flexible 
...call: methods with LABMDA().

@item
Renamed ...Description: methods to ...Encoding: for better use of
already-defined objc keyword: @@encode().

@item
New in the Collecting protocol:
Filtered enumerating instead of filtered shallowCopy'ing.
Enumerations still safe when modifying the contents.

@item
The beginnings of documentation in libcoll.texi.

@item
Many bug fixes.

@item
...and more.

@end itemize

Also see the @samp{ChangeLog} file for more detail.

@end ifclear
@c end ifclear ANNOUNCE_ONLY
